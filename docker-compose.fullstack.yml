version: '3.8'

services:
  # PostgreSQL Database (Optional - replace SQLite in production)
  postgres:
    image: postgres:15-alpine
    container_name: facial_auth_db
    environment:
      POSTGRES_DB: facial_auth
      POSTGRES_USER: facial_auth_user
      POSTGRES_PASSWORD: ${DB_PASSWORD:-changeme}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U facial_auth_user"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - facial_auth_network

  # Redis (for caching and session management)
  redis:
    image: redis:7-alpine
    container_name: facial_auth_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    networks:
      - facial_auth_network

  # Backend API
  backend:
    build:
      context: .
      dockerfile: deployment/Dockerfile
    container_name: facial_auth_backend
    environment:
      - ENVIRONMENT=production
      - API_HOST=0.0.0.0
      - API_PORT=8000
      - DATABASE_URL=postgresql://facial_auth_user:${DB_PASSWORD:-changeme}@postgres:5432/facial_auth
      - REDIS_URL=redis://redis:6379
      - CORS_ORIGINS=["http://localhost:3000","http://localhost"]
    ports:
      - "8000:8000"
    volumes:
      - ./weights:/app/weights:ro
      - ./data:/app/data
      - facial_auth_db:/app/data/db
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - facial_auth_network
    deploy:
      resources:
        limits:
          cpus: '4'
          memory: 8G
        reservations:
          cpus: '2'
          memory: 4G

  # Frontend (Nginx serving React build)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: facial_auth_frontend
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./deployment/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./deployment/ssl:/etc/nginx/ssl:ro
    depends_on:
      - backend
    networks:
      - facial_auth_network

  # Prometheus (Monitoring)
  prometheus:
    image: prom/prometheus:latest
    container_name: facial_auth_prometheus
    volumes:
      - ./deployment/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
    ports:
      - "9090:9090"
    networks:
      - facial_auth_network

  # Grafana (Dashboard)
  grafana:
    image: grafana/grafana:latest
    container_name: facial_auth_grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_SERVER_ROOT_URL=http://localhost:3001
    volumes:
      - grafana_data:/var/lib/grafana
    ports:
      - "3001:3000"
    depends_on:
      - prometheus
    networks:
      - facial_auth_network

volumes:
  postgres_data:
  redis_data:
  facial_auth_db:
  prometheus_data:
  grafana_data:

networks:
  facial_auth_network:
    driver: bridge


